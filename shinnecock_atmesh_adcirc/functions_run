#!/usr/bin/env bash-*-Shell-script-functions*-

###########################################################################
### Author:  Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
###
### Version - 1.0
###
###   1.0 Sun 15 May 2022
###########################################################################

set +u


defBinDir=/testing/CoastalApp/ALLBIN_INSTALL
defModFile=/testing/CoastalApp/modulefiles/envmodules_gnu.linux
defTolerance=1.0E-3


###========================================
### ParseArgs()
###
### Usage:      ParseArgs args
###
### Parameters: args = the script options
###
### Returns:    0
###
### Echoes:     NONE
###
### Gets the supplied options to the script.
###========================================
ParseArgs()
{
  local nm_func=$( basename ${BASH_SOURCE[${#BASH_SOURCE[@]}-1]} )

  local opt_all opt_opt opt_arg opt_chk

  local tmpVAR
  local ans0 ans ival intN
  local all_evars

  all_evars="MY_BINDIR MY_TOLERANCE MY_MODFILE"

  for ival in ${all_evars}; do unset __${ival}; done


  __MY_BINDIR=
  __MY_TOLERANCE=
  __MY_MODFILE=
          

  # -----
  # Process the function options
  opt_all=( b bin t tol np nproc m mod h help )
  opt_all=":$( echo "${opt_all[@]/#/-} ${opt_all[@]/#/--}" | sed 's/ /:/g' ):"

  unset __OPTION_LIST
  while test $# -gt 0; do
    case "${1}" in
      -[^-]*=* | --[^-]*=* )
        opt_opt="$( toLOWER "$( echo "${1}" | sed 's/=.*//' )" )"
        len=$(( ${#opt_opt} + 1 ))
        opt_arg="$( strTrim "$( echo "${1:${len}}" )" 2 )"
        [ "$( echo "${opt_all}" | egrep -o ":${opt_arg}:" )" ] && \
          opt_arg=
        ;;
      -[^-]* | --[^-]* )
        opt_opt="$( toLOWER "${1}" )"
        opt_chk="$( toLOWER "$( echo "${2}" | sed 's/=.*//' )" )"
        if [ "$( echo "${opt_all}" | egrep -o ":${opt_chk}:" )" ]; then
          opt_arg=
        else
          opt_arg="$( strTrim "$( echo "${2}" )" )"
        fi
        ;;
      *)
        opt_opt=
        opt_arg=
        ;;
    esac

    case "${opt_opt}" in
      -b | --b | -bin | --bin )
          checkFuncOpt "--bin"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              tmpVAR="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
              __MY_BINDIR="${tmpVAR}"
            fi
          fi
        ;;
      -t | --t | -tol | --tol )
          checkFuncOpt "--tol"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              tmpVAR="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
              if $( isPosNumber "${tmpVAR}" ); then
                __MY_TOLERANCE="${tmpVAR}"
              fi
            fi
          fi
        ;;
      -m | --m | -mod | --mod )
          checkFuncOpt "--mod"
          if [ $? -eq 0 ]; then
            if [ "X${opt_arg}" != "X" ]; then
              tmpVAR="$( echo "${opt_arg}" | sed 's/[[:space:]]//g' )"
              __MY_MODFILE="${tmpVAR}"
            fi
          fi
        ;;
      -h | -help | --h | --help )
          Usage ${nm_func}
        ;;
      *) ;; # DEFAULT
    esac
    shift
    opt_opt= 
    opt_arg=
  done
  unset __OPTION_LIST
  # -----

  # Export the values of all __* variables.
  for ival in ${all_evars}
  do
    ans0="$( eval "echo \${$(echo ${ival}):-}" )"
    ans="$( eval "echo \${$(echo __${ival}):-}" )"
    ans=${ans:-${ans0:-}}

    eval "${ival}=\${ans}"
    export ${ival}

    unset __${ival}
  done

  return 0
}

###========================================
### Usage()
###
### Usage:      Usage
###
### Parameters: NONE
###
### Returns : Exits on error
###
### Exports : NONE
###
### Echoes  : NONE
###
### Usage: Prints all usage options of the build script.
###========================================
Usage()
{
  local nm="$( basename ${0} )"

  echo
  echo "Usage: \"${nm}\" [{-|--}option1{=|space}[option_value1]] [{-|--}option2{=|space}[option_value2]] ..."
  echo

  echo "  -h|-help|--h|--help"
  echo "    Show this help screen."
  echo
  #---
  echo "  -b|--b|-bin|--bin [=|space] \"bin_directory\" (OPTIONAL)."
  echo "    The directory where the CoastalApp executables are located."
  echo "    Default: ${defBinDir}."
  echo
  #---
  echo "  -t|--t|-tol|--tol [=|space] \"tolerance_value\" (OPTIONAL)."
  echo "    The tolerance to use for equality when comparing data values."
  echo "    Default: ${defTolerance}."
  echo
  #---
  echo "  -m|--m|-mod|--mod [=|space] \"module file to source\" (OPTIONAL)."
  echo "    The full path of the module file to source."
  echo "    In a module based system, this file contains all the required modules to load"
  echo "    Default: ${defModFile}."
  echo
  #---

  exit 0
}

# -------------------------------------------------------
# procError()
# Usage:      procError message
#             procError "message1" \
#                       "message2" \
#                       .          \
#                       .          \
#                       .          \
#                       "messageN"
# Parameters:
#   message : The list of messages (strings) to display
#
# Returns : 1 (failure) or exits with code 1
#
# Exports : NONE
#
# Echoes  : On exit displays the supplied message with
#           the "ERROR" heading.
#
# procError: Force exit (code 1) on error and display the error message.
# -------------------------------------------------------
procError()
{
  # These are for the current function (procError)
  local fnm0="${FUNCNAME[0]}"
  local snm0="$( basename "${BASH_SOURCE[0]}" )"

  # These are for the calling function(s)
  local err_str fun_str src_str
  local fnm1="${FUNCNAME[1]}"
  local fnm2="${FUNCNAME[2]}"
  local fnm3="${FUNCNAME[3]}"
  local fnm4="${FUNCNAME[4]}"
  local snm1="$( basename "${BASH_SOURCE[1]}" )"
  local snm2="$( basename "${BASH_SOURCE[2]}" )"
  local snm3="$( basename "${BASH_SOURCE[3]}" )"
  local snm4="$( basename "${BASH_SOURCE[4]}" )"

  # proc_str: strings to be displayed (if supplied)
  # trim_str: trimmed version of proc_str
  local trim_str proc_str=( "$@" )
  local -i istr


  # Strings that identify the calling functions and sources
  cfnm="${fnm2:+${fnm2}:}${fnm3:+${fnm3}:}${fnm4:+${fnm4}:}"
    cfnm="${cfnm:+(${cfnm%:})}"
  csnm="${snm2:+${snm2}:}${snm3:+${snm3}:}${snm4:+${snm4}:}"
    csnm="${csnm:+(${csnm%:})}"

  src_str="${snm1}${csnm:+ ${csnm}}"
  fun_str="${fnm1}${cfnm:+ ${cfnm}}"

  err_str="${fun_str:+${fun_str}: }${src_str:+called from: ${src_str}}"
  [ -z "${err_str:-}" ] && \
    err_str="${fnm0:+${fnm0}: }${snm0:+defined in: ${snm0}}"

  # Display everything and then issue the exit command
  [ -n "${err_str:+1}" ] && echo "ERROR:: ${err_str}"
  for ((istr = 0; istr < ${#proc_str[@]}; istr++))
  do
    trim_str="$( strTrim "${proc_str[${istr}]}" 2)"
    [ -n "${trim_str:+1}" ] && echo "        ${proc_str[${istr}]}"
  done
  echo "        Exiting now ..."
  echo
  if [ -n "${PS1:+1}" ]; then
    return 1
  else
    exit 1
  fi
}

# -------------------------------------------------------
# procWarn()
# Usage:      procWarn message
#             procWarn "message1" \
#                      "message2" \
#                      .          \
#                      .          \
#                      .          \
#                      "messageN"
# Parameters:
#   message : The list of messages (strings) to display
#
# Returns : 0 (success)
#
# Exports : NONE
#
# Echoes  : Displays the supplied warning message with
#           the "WARN" heading.
#
# procWarn: Issue a warning message.
# -------------------------------------------------------
procWarn()
{
  # These are for the current function (procError)
  local fnm0="${FUNCNAME[0]}"
  local snm0="$( basename "${BASH_SOURCE[0]}" )"

  # These are for the calling function(s)
  local func_str=
  local fnm1="${FUNCNAME[1]}"
  local fnm2="${FUNCNAME[2]}"
  local fnm3="${FUNCNAME[3]}"
  local fnm4="${FUNCNAME[4]}"
  local snm1="$( basename "${BASH_SOURCE[1]}" )"
  local snm2="$( basename "${BASH_SOURCE[2]}" )"
  local snm3="$( basename "${BASH_SOURCE[3]}" )"
  local snm4="$( basename "${BASH_SOURCE[4]}" )"

  # proc_str: strings to be displayed (if supplied)
  # trim_str: trimmed version of proc_str
  local trim_str= proc_str=( "$@" )
  local -i istr


  # Strings that identify the calling functions and sources
  cfnm="${fnm2:+${fnm2}:}${fnm3:+${fnm3}:}${fnm4:+${fnm4}:}"
    cfnm="${cfnm:+(${cfnm%:})}"
  csnm="${snm2:+${snm2}:}${snm3:+${snm3}:}${snm4:+${snm4}:}"
    csnm="${csnm:+(${csnm%:})}"

  func_str="${fnm1}${cfnm:+ ${cfnm}}: called from: ${snm1}${csnm:+ ${csnm}}"


  # Display everything and then issue the exit command
  [ -n "${func_str:+1}" ]  && echo "WARN:: ${func_str}"
  for ((istr = 0; istr < ${#proc_str[@]}; istr++))
  do
    trim_str="$( strTrim "${proc_str[${istr}]}" 2)"
    [ -n "${trim_str:+1}" ] && echo "        ${proc_str[${istr}]}"
  done
  echo
  return 0
}

# -------------------------------------------------------
# isNumber()
# Usage:      isNumber var
# Parameters: var
# Returns:    1 if var is not a number (failure)
#             0 in any other case (success)
# Echoes:     NONE
# -------------------------------------------------------
isNumber()
{
  local -i retval=1
  local numb="${1}"

  local pat pat1 pat2

  # Remove leading/trailing whitespace characters. Approach 1
  #numb="$(echo "${1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"

  # Remove leading/trailing whitespace characters. Approach 2
  numb="${numb#"${numb%%[![:space:]]*}"}"
  numb="${numb%"${numb##*[![:space:]]}"}"

  [ -z "${numb:-}" ] && return ${retval}

    pat1='[^0-9dDeE+\.\-]'
  [[ "${numb}" =~ ${pat1} ]] && return ${retval}

    pat1='^([-+]?[0-9]+)?([.][0-9]+)?([eE][-+]?[0-9]+)?$'
    pat2='^([-+]?[0-9]+)?([.][0-9]+)?([dD][-+]?[0-9]+)?$'
  for pat in ${pat1} ${pat2}
  do
    if  [[ "${numb}" =~ ${pat} ]] ; then
       retval=0
       break
    fi
  done

  return ${retval}
}

# -------------------------------------------------------
# isPosNumber()
# Usage:      isPosNumber var
# Parameters: var
# Returns:    1 if var is not a positive number (failure)
#             0 in any other case (success)
# Echoes:     NONE
# -------------------------------------------------------
isPosNumber()
{
  local -i retval=1
  local numb val

  [ $# -eq 0 ] && return ${retval}

  if $( isNumber "${1}" ); then
    numb="$( echo "${1}" | sed 's/[eEdD]/*10^/g;s/+//g' )"
    val="$(echo "${numb} >= 0" | bc -ql 2>/dev/null)"

    [ "${val:-0}" -eq 1 ] && retval=0
  fi

  return ${retval}
}

# -------------------------------------------------------
# isInteger()
# Usage:      isInteger var
# Parameters: var
# Returns:    1 if var is not an integer (0 is an integer as well)
#             0 in any other case
# Echoes:     NONE
# -------------------------------------------------------
isInteger()
{
  local -i retval=1

  [ $# -eq 0 ] && return ${retval}

  if [ "${1:-UNDEF}" -eq "${1}" ] 2>/dev/null
  then
    retval=0
  fi

  return ${retval}
}

# -------------------------------------------------------
# getInteger()
# Usage:      getInteger int
# Parameters: int (int >=0 or, int < 0)
# Returns:    1 if var is not an integer
#             0 in any other case
# Echoes:     int, if it is a valid integer (including 0),
#             in any other case echoes an empty string
# -------------------------------------------------------
getInteger()
{
  local -i retval=0
  local echoval= minus=

  # strip spaces, '+' signs and '-' signs
  # if the first character of the string is '-', set the minus variable
  echoval="$( echo "${1}" | sed 's/[[:space:]+]//g' )"
  [ "X$( echo "${echoval:0:1}" )" = "X-" ] && minus="-"
  echoval="${minus}$( echo "${echoval}" | sed 's/[[:space:]-]//g' )"

  if isInteger ${echoval}; then
    echoval="$(echo "scale=0; ${echoval} + 0" | bc -ql 2>/dev/null)"
    retval=$?
    echoval="${echoval:-0}"
  else
    echoval=
    retval=1
  fi

  echo -n ${echoval}

  return ${retval}
}

# -------------------------------------------------------
# getPosInteger()
# Usage:      getPosInteger posint
# Parameters: posint (posint >= 0)
# Returns:    1 if var is not a positive integer
#             0 in any other case
# Echoes:     posint if it is a valid positive integer
#             (including 0), in any other case echoes an
#             empty string
# -------------------------------------------------------
getPosInteger()
{
  local -i retval=0
  local echoval=

  echoval=$( getInteger "${1}" )
  retval=$?

  if [ ${retval} -ne 0 ] ; then
    echoval=
    retval=1
  else
    if [ ${echoval} -lt 0 ]; then
      echoval=
      retval=1
    fi
  fi

  echo -n ${echoval}

  return ${retval}
}

# -------------------------------------------------------
# strRmDuplicate()
# Usage:      strRmDuplicate string
# Parameters:
#   string : The input string
#            The input string that can contain a list of substrings
#            separated by spaces, in which duplicate substrings
#            are removed without sorting the remaining entries
#
# Returns : NONE
#
# Exports : NONE
#
# Echoes  : The modified string without duplicate substrings
#
# strRmDuplicate: Removes duplicate sub-strings from string
#                 without sorting the remaining entries.
# -------------------------------------------------------
strRmDuplicate()
{
  local sep_str="${2:-[[:space:]]}"

  echo -n $( echo "${1}" | tr "${sep_str}" "\n" | \
             awk '{if ($1 in a) next; a[$1]=$0; print}' | \
             tr "\n" " " )
}

# -------------------------------------------------------
# checkFILE()
# Usage:      checkFILE [options] file
# Parameters: file (string)
# Returns:    1 if the options are not met or, no arguments
#             were supplied or, the file is an empty string
#             0 in any other case (success)
# Echoes:     NONE
#
# Possible options are:
# -h FILE exists and is a symbolic link (same as -L)
# -L FILE exists and is a symbolic link (same as -h)
# -r FILE exists and is readable
# -s FILE exists and has a size greater than zero
# -w FILE exists and is writable
#
# Checks if the file "file" is a valid file
# based on the options supplied. If no options supplied
# it simply checks that if "file" is a a regular file
# -------------------------------------------------------
checkFILE()
{
  local -i retval=0
  local get_opts my_arg="" chk_my_arg="" my_opts="-f" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && { retval=1; return ${retval}; }

  while getopts ":hLrsw" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        s) my_opts="${my_opts} -s";;
        w) my_opts="${my_opts} -w";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${my_arg}" = "X" ] && { retval=1; return ${retval}; }

  for iopt in ${my_opts}
  do
    [ ! ${iopt} "${my_arg}" ] && { retval=1; return ${retval}; }
  done

  return ${retval}
}

# -------------------------------------------------------
# checkDIR()
# Usage:      checkDIR [options] dir
# Parameters: dir (string)
# Returns:    1 if the options are not met or, no arguments
#             were supplied or, the dir is an empty string
#             0 in any other case (success)
# Echoes:     NONE
#
# Possible options are:
# -h FILE exists and is a symbolic link (same as -L)
# -L FILE exists and is a symbolic link (same as -h)
# -r FILE exists and is readable
# -x FILE exists and is executable
# -w FILE exists and is writable
#
# Checks if the directory "dir" is a valid directory
# based on the options supplied. If no options supplied
# it simply checks that if "dir" is a directory
# -------------------------------------------------------
checkDIR()
{
  local -i retval=0
  local get_opts my_arg="" chk_my_arg="" my_opts="-d" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && { retval=1; return ${retval}; }

  while getopts ":hLrxw" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        x) my_opts="${my_opts} -x";;
        w) my_opts="${my_opts} -w";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${my_arg}" = "X" ] && { retval=1; return ${retval}; }

  for iopt in ${my_opts}
  do
    [ ! ${iopt} "${my_arg}" ] && { retval=1; return ${retval}; }
  done

  return ${retval}
}

# -------------------------------------------------------
# pathFILE()
# Usage:      pathFILE inp_file
# Parameters:
#   inp_file : the name of the file to determine its abosule path
#
# Returns :   none
# Echoes  :   the full path of the file
# Exports :   none
#
# pathFILE determines the full path to a file
# -------------------------------------------------------
pathFILE()
{
  local nm_func="${FUNCNAME[0]}"

  local inp_file inp_dir

  if [ $# -lt 1 ]; then
    inp_file="wrong number of arguments
              usage: ${nm_func} filename"
    echo -n "${inp_file}"
    return 1
  fi

  inp_file=${1}

  inp_dir=$( dirname "${inp_file}" )
  inp_file=$( basename "${inp_file}" )

  if [ -d "${inp_dir}"  ]; then
    pushd ${inp_dir} >/dev/null 2>&1
      inp_dir="$( pwd )"
    popd >/dev/null 2>&1
  fi

  if [ "${inp_dir}" = "/" ] && [ "${inp_file}" = "/" ]; then
    inp_file=${inp_dir}
  elif [ "${inp_dir}" = "/" ]; then
    inp_file=${inp_dir}${inp_file}
  else
    inp_file=${inp_dir}/${inp_file}
  fi

  echo -n ${inp_file}

  return 0
}

# -------------------------------------------------------
GetPathEnvVar()
{
  local nm_func="${FUNCNAME[0]}"

  local -i reverse=0
  local dirLIST pathVAR pathLIST dirLIST
  local dir var val tmpSTR chkSTR


  [ $# -lt 1 ] && return 0

  ##########
  # Work on the function arguments
  pathVAR=$( toLOWER "${1-}" | awk '{print $1}' )
  case "${pathVAR}" in
    path)
      var=PATH
      ;;
    ld)
      var=LD_LIBRARY_PATH
      ;;
    man)
      var=MANPATH
      ;;
    matlab)
      var=MATLABPATH
      ;;
    idl)
      ;;
    *)
      echo "Usage: ${nm_func} pathVAR dirLIST"
      echo "       pathVAR one of: path, ld, man, matlab, idl"
      echo "       dirLIST: the list of the directories to include recursively"
      echo "                into the corresponding environment variable"
      echo "       Environment variables that can be set are:"
      echo "         path -> PATH,         ld -> LD_LIBRARY_PATH"
      echo "          man -> MANPATH,  matlab -> MATLABPATH"
      echo "          idl -> IDL_PATH and IDL_DLM_PATH"
      return 1
      ;;
  esac

  if [ $# -lt 2 ]; then
    if [ "X${pathVAR:-}" = "Xidl" ]; then
      IDL_PATH="${IDL_PATH:-}"
      IDL_DLM_PATH="${IDL_DLM_PATH:-}"
      export IDL_PATH IDL_DLM_PATH
    else
      val="$( eval "echo \$$(echo ${var})" )"
      eval "${var}=${val:-}"
      export ${var}
    fi
    return 0
  fi

  dirLIST=$( echo $( for dir in ${2-}; do echo "${dir}"; done | sed 's/\/*$//' ) )
  dirLIST=$( strRmDuplicate "${dirLIST}" )

  # Reverse the order of the input directories (if requested)
  [[ "$( toLOWER "${3-}" | awk '{print $1}' )" = rev* ]] && \
    reverse=1

  if [ ${reverse} -gt 0 ]; then
    tmpSTR=
    dirLIST=$( echo $( for dir in ${dirLIST}; do tmpSTR="${dir} ${tmpSTR}"; done; echo ${tmpSTR}  ) )
  fi
  ##########


  # Were given a directory list therefore, we proceed with the following code


  ##########
  # Special treatment for idl.
  # When idl encounters a '+' sign in front of a directory
  # in the IDL_PATH or IDL_DLM_PATH environment variables
  # it recursively checks the directory for appropriate
  # idl files (*.pro, *.sav, *.dlm) and then expands
  # the environment variables.
  if [ "X${pathVAR:-}" = "Xidl" ]; then
    my_IDL_PATH=${IDL_PATH:-<IDL_DEFAULT>}
    my_IDL_DLM_PATH=${IDL_DLM_PATH:-<IDL_DEFAULT>}

    pathLIST=
    for dir in ${dirLIST}
    do
      if [ -d "${dir}" ]; then
        if [ ${reverse} -gt 0 ]; then
          pathLIST="+${dir}:${pathLIST}"
        else
          pathLIST="${pathLIST}:+${dir}"
        fi
      fi
    done
    # The IDL_PATH variable.
      chkSTR=( $( echo "${my_IDL_PATH}" | sed 's/[+:]/ /g' ) )
      chkSTR=${chkSTR[${#chkSTR[@]}-1]}
    tmpSTR=$( echo ${my_IDL_PATH}${pathLIST:+:+${pathLIST}} | sed 's/[+:]/ /g' )
    tmpSTR=$( strRmDuplicate "${tmpSTR}" )
    tmpSTR=$( echo ${tmpSTR#*${chkSTR}} | sed 's/ /:+/g' )
    if [ ${reverse} -gt 0 ]; then
      my_IDL_PATH=$( echo "+${tmpSTR}:${my_IDL_PATH}" )
    else
      my_IDL_PATH=$( echo ${my_IDL_PATH}:+${tmpSTR} )
    fi
    # The IDL_DLM_PATH variable.
      chkSTR=( $( echo "${my_IDL_DLM_PATH}" | sed 's/[+:]/ /g' ) )
      chkSTR=${chkSTR[${#chkSTR[@]}-1]}
    tmpSTR=$( echo ${my_IDL_DLM_PATH}${pathLIST:+:+${pathLIST}} | sed 's/[+:]/ /g' )
    tmpSTR=$( strRmDuplicate "${tmpSTR}" )
    tmpSTR=$( echo ${tmpSTR#*${chkSTR}} | sed 's/ /:+/g' )
    if [ ${reverse} -gt 0 ]; then
      my_IDL_DLM_PATH=$( echo "+${tmpSTR}:${my_IDL_DLM_PATH}" )
    else
      my_IDL_DLM_PATH=$( echo ${my_IDL_DLM_PATH}:+${tmpSTR} )
    fi

    IDL_PATH=${my_IDL_PATH}
    IDL_DLM_PATH=${my_IDL_DLM_PATH}
    export IDL_PATH IDL_DLM_PATH

    return 0
  fi
  ##########


  ##########
  # Special treatment for matlab.
  # For matlab recurse each input (root) directory
  # and append all directories found in the MATLABPATH
  # environment variable.
  if [ "X${pathVAR:-}" = "Xmatlab" ]; then
    pathLIST="${MATLABPATH:-}"
    for dir in ${dirLIST}
    do
      if [ -d "${dir}" ]; then
        dir=$( find ${dir} \
               -type f \( -iname "*.m" -o -iname "*.mat" -o -iname "*.mex*" \
                                       -o -iname "*.mdl*" -o -iname "*.slx*" \) \
               -exec dirname  {} \; \
               | sort -u | sed '/\/\./d' | tr '\n' ':' | sed 's/:$//' )
        if [ ${reverse} -gt 0 ]; then
          pathLIST="${dir}:${pathLIST}"
        else
          pathLIST="${pathLIST}:${dir}"
        fi
      fi
    done
    pathLIST=$( echo "${pathLIST}" | sed 's/:/ /g' )
    pathLIST=$( strRmDuplicate "${pathLIST}" )
    pathLIST=$( echo "${pathLIST}" | sed 's/ /:/g' )

    MATLABPATH=${pathLIST:-}
    export MATLABPATH

    return 0
  fi
  ##########


  ##########
  # All other PATH variables.
  val="$( eval "echo \$$(echo ${var})" )"
  pathLIST="${val:-}"
  for dir in ${dirLIST}
  do
    if [ -d "${dir}" ]; then
      if [ ${reverse} -gt 0 ]; then
        pathLIST="${dir}:${pathLIST}"
      else
        pathLIST="${pathLIST}:${dir}"
      fi
    fi
  done
  pathLIST=$( echo "${pathLIST}" | sed 's/:/ /g' )
  pathLIST=$( strRmDuplicate "${pathLIST}" )
  pathLIST=$( echo "${pathLIST}" | sed 's/ /:/g' )

  eval "${var}=${pathLIST:-}"
  export ${var}
  ##########


  return 0
}

# -------------------------------------------------------
# checkPROG()
# Usage:      checkPROG [options] program
# Parameters: program (string)
# Returns:    1 if the options are not met or, no arguments
#             were supplied or, the program is an empty string
#             0 in any other case (success)
# Echoes:     NONE
#
# Possible options are:
# -h FILE exists and is a symbolic link (same as -L)
# -L FILE exists and is a symbolic link (same as -h)
# -r FILE exists and is readable
# -s FILE exists and has a size greater than zero
#
# Checks if the program "program" is a valid executable
# program based on the options supplied. If no options
# supplied it simply checks that if "program" is an
# executable program
# -------------------------------------------------------
checkPROG()
{
  local get_opts my_arg="" chk_my_arg="" my_opts="-e -x" iopt
# Use these to reset the options since the shell does not
# do that automatically
  local opt_id=${OPTIND} opt_arg="${OPTARG}"

  [ $# -eq 0 ] && return 1

  while getopts ":hLrs" get_opts
  do
    case ${get_opts} in
      h|L) my_opts="${my_opts} -h";;
        r) my_opts="${my_opts} -r";;
        s) my_opts="${my_opts} -s";;
        *) ;; # DEFAULT
    esac
  done

# Get the first argument after the options
  shift $(( ${OPTIND} - 1))
  my_arg=${1}

# Reset the option variables since the shell doesn't do it
  OPTIND=${opt_id}
  OPTARG="${opt_arg}"

  chk_my_arg="$( echo "${my_arg##*/}" | sed -e 's/[[:space:]]//g' )"
  [ "X${chk_my_arg}" = "X" ] && return 1

  for iopt in ${my_opts}
  do
    [ ! ${iopt} ${my_arg} ] && return 1
  done

  return 0
}

# -------------------------------------------------------
# getPROG()
# Usage:      getPROG program
#
# Parameters:
# program : The name of the program (STRING).
#
# Returns : 0 (success), 1 (failure)
# Exports : NONE
# Echoes  : The program name or an error message on failure
#
# Checks if the program "program" is a valid executable
# program. On error, echoes an error message and returns 1
# -------------------------------------------------------
getPROG()
{
  local nm_func=${FUNCNAME[0]}

  local nm_prog exe_prog old_PATH
  local dirLIST my_dirLIST
  local dir dir1
  local -i STATUS

  local cwd="$( pwd )"
  local old_PATH=${PATH}


  if [ $# -eq 0 ]; then
    exe_prog="Usage: ${nm_func} progname"
    echo -n "${exe_prog}"
    STATUS=1
    return ${STATUS}
  fi


  nm_prog=${1}
  unalias ${nm_prog} >/dev/null 2>&1

  dirLIST="${2}"


  ###############
  ### Check if full program path was supplied
  #   (including the current directory full path)
  if $( checkPROG "${nm_prog}" ); then
    exe_prog="$( pathFILE "${nm_prog}" )"
    echo -n ${exe_prog}
    STATUS=0
    return ${STATUS}
  fi


  ###############
  ### Check if program is a bultin function
  unset PATH
    exe_prog="$( command -v ${nm_prog} 2>&1 )"
    STATUS=$?
  PATH=${old_PATH}
  export PATH
  if [ ${STATUS} -eq 0 ]; then
    echo -n "${exe_prog}"
    return ${STATUS}
  fi


  ###############
  ### Check if program is in the user's PATH
  exe_prog="$( command -v ${nm_prog} 2>&1 )"
  STATUS=$?
  if [ ${STATUS} -eq 0 ]; then
    echo -n "${exe_prog}"
    return ${STATUS}
  fi


  ###############
  ### Check if program is in dirLIST ...
  #   and in user's path.
  dirLIST="${dirLIST} . ${cwd} ${cwd}/.. ${cwd}/../.."
  my_dirLIST=
  for dir in ${dirLIST}
  do
    if $( checkDIR -rx "${dir}" ); then
      pushd ${dir} >/dev/null 2>&1
        dir="$( pwd )"
      popd >/dev/null 2>&1

      dir="${dir#${cwd}/}"
      if [ -n "${dir:+1}" ]; then
        my_dirLIST="${my_dirLIST} ${dir}"
        for idir in Bin bin sbin
        do
          dir1="$( echo "${dir}" | sed 's/\/*$//' )"
          [ -d ${dir1}/${idir} ] && \
            my_dirLIST="${my_dirLIST} ${dir1}/${idir}"
        done
      fi
    fi
  done
  dirLIST=$( strRmDuplicate "${my_dirLIST}" )
  dirLIST=$( strTrim "${dirLIST}" 2 )

  GetPathEnvVar path "${dirLIST}"
  
  exe_prog="$( command -v ${nm_prog} 2>&1 )"
  STATUS=$?

  [ ${STATUS} -ne 0 ] && \
    exe_prog="${nm_func}: Could not locate/execute the program/function \"${nm_prog:-UNDEF}\""

  PATH=${old_PATH}
  export PATH

  echo -n "${exe_prog}"

  return ${STATUS}
}

###========================================
### toUPPER()
### Usage:      toUPPER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all upper case string
###
### toUPPER: Converts a string to an all upper case string
###========================================
toUPPER()
{
  echo "${1}" | tr '[:lower:]' '[:upper:]'
}

###========================================
### toLOWER()
### Usage:      toLOWER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all lower case string
###
### toLOWER: Converts a string to an all lower case string
###========================================
toLOWER()
{
  echo "${1}" | tr '[:upper:]' '[:lower:]'
}

###========================================
### strTrim()
### Usage:      strTrim s1 flag
### Parameters:
###     s1 : The input string
###   flag : Integer
###          A value that controls the action of strTrim.
###          If flag is zero or not present, trailing blanks are removed.
###          Leading blanks are removed if it is equal to 1.
###          Both are removed if it is equal to 2.
###          In any other case, trailing blanks are removed.
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : s1 with all leading and/or trailing
###           white spaces removed.
###
### strTrim: Removes all leading and/or trailing white spaces
###          from the input string
###========================================
strTrim ()
{
  local trimFLG="${2:-0}"
  local out_str=

  case ${trimFLG} in
    0) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
    1) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//')" ;;
    2) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" ;;
    *) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
  esac

  echo -n ${out_str}
}

###========================================
### checkFuncOpt()
### Usage:      checkFuncOpt opt_name
### Parameters:
###   opt_name: The name of the option to a function
###
### Returns : Exits on error
###
### Exports : __OPTION_LIST
###
### Echoes  : NONE
###
### checkFuncOpt: Checks if an option to a function is already supplied.
###========================================
checkFuncOpt() {
  local opt_inp opt_list

  [ $# -eq 0 ] && return -1

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( echo "${opt_inp}" | sed 's/^[-]*//' )"

  opt_list="$( strTrim "${__OPTION_LIST}" 2 )"
  [ -n ${opt_list:+1} ] && \
    opt_list=":$( echo "${opt_list}" | sed 's/ /:/g' ):"

  [ "$( echo "${opt_list}" | egrep -o ":${opt_inp}:" )" ] && return 1

  __OPTION_LIST="${__OPTION_LIST} ${opt_inp}"
  export __OPTION_LIST

  return 0
}

###========================================
### checkModuleCmd()
### Usage:      checkModuleCmd
###
### Returns : 1 on error
###
### Exports : modulecmd_ok (>= 1 module command exists)
###
### Echoes  : NONE
###
### checkModuleCmd: Checks if the command module is available.
###========================================
checkModuleCmd() {
  local err_val ret_val=0

  module -v >/dev/null 2>&1
  err_val=$?

  if [ ${err_val} -ne 0 ]; then
    [ -e /etc/profile.d/modules.sh ] && \
      . /etc/profile.d/modules.sh

    module -v >/dev/null 2>&1
    err_val=$?

    if [ ${err_val} -ne 0 ]; then
      ret_val=${err_val}
      modulecmd_ok=-1
    else
      ret_val=0
      modulecmd_ok=1
    fi
  else
    ret_val=0
    modulecmd_ok=1
  fi
  
  export modulecmd_ok
  
  return ${ret_val}
}

###========================================
### getNemsModelVars()
### Usage:      getNemsModelVars MODEL [model_name]
###
### Returns : 1 on error
###
### Exports : MODEL_model, MODEL_nProcs
###    where: MODEL = (one of: ATM, WAV, OCN, HYD/NWM, ICE, ...)
###
### Echoes  : None
###
### getNemsModelVars: Gets model specific variable values for the requested
###                   model type from the nems.configure file
###                   (e.g., number of processors assigned, model name, etc)
###========================================
getNemsModelVars() {
  local nm_func="${FUNCNAME[0]}"
  local modelType modelName modelPetListBounds
  local myModel ival_model ival_plist ival_attr tmpArr
  local -i nproc ret_val=0

  if [ $# -eq 0 ]; then
   procError "missing argument" \
             "usage: ${nm_func} model_type (one of: ATM, OCN, WAV, HYD/NWM, ICE)"
  else
     modelType=$( toUPPER "${1}" )
    if [ "X${2}" != "X" ]; then
      modelName=$( toLOWER "${2}" )
    fi
  fi

  if ! $( checkFILE -r "nems.configure" ); then
    procError "The file \"nems.configure\" is not found" \
              "This file should be located in the test case directory: ${caseName}"
  fi

  # These are used to assign the variables:
  #    MODEL_model and MODEL_petlist_bounds and MODEL_attributes and MODEL_nProcs
  # where: MODEL = (one of: ATM, WAV, OCN, HYD/NWM, ICE, ...)
  ival_model="$( echo $( eval "echo $(echo ${modelType}_model)" ) )"
  ival_plist="$( echo $( eval "echo $(echo ${modelType}_petlist_bounds)" ) )"
  ival_attr="$( echo $( eval "echo $(echo ${modelType}_attributes)" ) )"
  ival_nproc="$( echo $( eval "echo $(echo ${modelType}_nProcs)" ) )"

  # Check if the requested model by the user is defined in the nems.configure file
  myModel="$( toLOWER "$(grep -i ${ival_model} nems.configure | awk '{print $2}')" )"
  if [ "X${myModel}" != "X" ]; then
    if [ "X${modelName}" != "X" ]; then
      if [ "${myModel}" != "${modelName}" ]; then
        procError "The model defined in nems.configure is \"${myModel}\"" \
                  "This test is designed to be used with the model \"${modelName}\""
      fi
    fi
  else
    procError "The model type requested is not defined in nems.configure: modelType = ${modelType}"
  fi

  modelPetListBounds="$( grep -i ${ival_plist} nems.configure )"
  tmpArr=( $(echo "${modelPetListBounds}" | awk '{print $2 " " $3}') )
  nproc=$(( ${tmpArr[1]} - ${tmpArr[0]} + 1 ))

  if [ ${nproc} -le 0 ]; then
    procError "Invalid ${modelType} Petlist Bounds found in \"nems.configure:\"" \
              "$( echo "${modelPetListBounds}" )" \
              "Please correct the model's pet list bounds"
  fi

  eval "${ival_model}=\${myModel}"
  export ${ival_model}

  eval "${ival_nproc}=\${nproc}"
  export ${ival_nproc}

  return ${ret_val}
}
